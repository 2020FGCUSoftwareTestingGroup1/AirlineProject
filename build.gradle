plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

group 'com.thursdaytestingroup1'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.toedter:jcalendar:1.4"
    implementation "mysql:mysql-connector-java:8.0.23"

    testImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.8.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    testImplementation 'org.junit.platform:junit-platform-runner:1.7.1'
    testImplementation 'org.assertj:assertj-swing-junit:3.17.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

application {
    mainClass = 'Main'
}

test {
    useJUnitPlatform()
    finalizedBy coverageCollector("test.exec")
}

task testUnit(type: Test) {
    group = "verification"

    useJUnitPlatform {
        includeTags 'unit'
    }

    finalizedBy coverageCollector("testUnit.exec")

}

task testUi(type: Test) {
    group = "verification"

    useJUnitPlatform {
        includeTags 'ui'
    }

    finalizedBy coverageCollector("testUi.exec")
}

def coverageCollector(String execLocation) {
    return tasks.create(execLocation, JacocoReport) {
        group = null

        println(fileTree(dir: "$project.buildDir/classes"))

        afterEvaluate {
            /**
             * DB excluded since it is all interface and production code for connecting to an actual SQL database
             * and we can't guarantee the state of a real server without something of a staging environment.
             */
            classDirectories.setFrom(files(fileTree(dir: "$project.buildDir/classes", exclude: '**/database/**')))
        }

        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
        executionData(file("$buildDir/jacoco/$execLocation"))
    }
}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/jacoco")
}