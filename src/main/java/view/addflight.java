package view;

import com.toedter.calendar.JDateChooser;
import database.Database;
import database.IDatabase;
import model.Flight;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;

import static javax.swing.JOptionPane.showMessageDialog;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


public class addflight extends JInternalFrame {
    private IDatabase database = Database.getDatabase();

    /**
     * Creates new form addflight
     */
    public addflight() {
        initComponents();
        autoID();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootPanel = new JPanel();
        flightIdLabel = new JLabel();
        flightIdField = new JLabel();
        flightNameLabel = new JLabel();
        sourceLabel = new JLabel();
        departureLabel = new JLabel();
        flightNameInput = new JTextField();
        dateLabel = new JLabel();
        dateChooser = new JDateChooser();
        departTimeLabel = new JLabel();
        departTimeInput = new JTextField();
        arriveTimeInput = new JTextField();
        arrivalTimeLabel = new JLabel();
        flightChargeLabel = new JLabel();
        flightChargeInput = new JTextField();
        addFlightButton = new JButton();
        cancelButton = new JButton();
        arrivalLocationComboBox = new JComboBox<>();
        departureLocationComboBox = new JComboBox<>();

        rootPanel.setBackground(new Color(51, 51, 255));

        flightNameInput.setName("addFlightNameInput");
        departTimeInput.setName("addDepartureInput");
        arriveTimeInput.setName("addArrivalInput");
        flightChargeInput.setName("addFlightChargeInput");
        dateChooser.setName("addFlightDateInput");
        addFlightButton.setName("addFlightButton");
        cancelButton.setName("cancelFlightButton");
        rootPanel.setName("addFlightPanel");

        flightIdLabel.setFont(new Font("Tahoma", Font.BOLD, 11)); // NOI18N
        flightIdLabel.setForeground(new Color(255, 255, 255));
        flightIdLabel.setText("Flight ID");

        flightIdField.setFont(new Font("Tahoma", Font.BOLD, 12)); // NOI18N
        flightIdField.setForeground(new Color(255, 255, 0));
        flightIdField.setText("jLabel2");

        flightNameLabel.setFont(new Font("Tahoma", Font.BOLD, 11)); // NOI18N
        flightNameLabel.setForeground(new Color(255, 255, 255));
        flightNameLabel.setText("Flight Name");

        sourceLabel.setFont(new Font("Tahoma", Font.BOLD, 11)); // NOI18N
        sourceLabel.setForeground(new Color(255, 255, 255));
        sourceLabel.setText("Source");

        departureLabel.setFont(new Font("Tahoma", Font.BOLD, 11)); // NOI18N
        departureLabel.setForeground(new Color(255, 255, 255));
        departureLabel.setText("Departure");

        dateLabel.setForeground(new Color(255, 255, 255));
        dateLabel.setText("Date");

        departTimeLabel.setForeground(new Color(255, 255, 255));
        departTimeLabel.setText("Dep Time");

        arrivalTimeLabel.setForeground(new Color(255, 255, 255));
        arrivalTimeLabel.setText("Arr Time");

        flightChargeLabel.setForeground(new Color(255, 255, 255));
        flightChargeLabel.setText("Flight Charge");

        addFlightButton.setText("Add");
        addFlightButton.addActionListener(this::onAddFlight);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(this::onCancel);

        var flightLocations = new String[] { "India", "Sri Lanka", "United Kingdom", "USA", "Canada", "China" };

        arrivalLocationComboBox.setModel(new DefaultComboBoxModel<>(flightLocations));

        departureLocationComboBox.setModel(new DefaultComboBoxModel<>(flightLocations));

        GroupLayout groupLayout = new GroupLayout(rootPanel);
        rootPanel.setLayout(groupLayout);
        groupLayout.setHorizontalGroup(
            groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(groupLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(groupLayout.createSequentialGroup()
                        .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(flightIdLabel)
                            .addComponent(flightNameLabel))
                        .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(groupLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(flightIdField))
                            .addGroup(groupLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(flightNameInput, GroupLayout.PREFERRED_SIZE, 136, GroupLayout.PREFERRED_SIZE))))
                    .addGroup(GroupLayout.Alignment.TRAILING, groupLayout.createSequentialGroup()
                        .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(sourceLabel)
                            .addComponent(departureLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(arrivalLocationComboBox, 0, 136, Short.MAX_VALUE)
                            .addComponent(departureLocationComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(103, 103, 103)
                .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(groupLayout.createSequentialGroup()
                        .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(dateLabel)
                            .addComponent(departTimeLabel)
                            .addComponent(arrivalTimeLabel))
                        .addGap(62, 62, 62)
                        .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateChooser, GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(departTimeInput)
                            .addComponent(arriveTimeInput)))
                    .addGroup(groupLayout.createSequentialGroup()
                        .addComponent(flightChargeLabel)
                        .addGap(52, 52, 52)
                        .addComponent(flightChargeInput, GroupLayout.PREFERRED_SIZE, 172, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(95, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, groupLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addFlightButton, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        groupLayout.setVerticalGroup(
            groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(groupLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(flightIdLabel)
                        .addComponent(flightIdField)
                        .addComponent(dateLabel))
                    .addComponent(dateChooser, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(flightNameLabel)
                    .addComponent(flightNameInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(departTimeLabel)
                    .addComponent(departTimeInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceLabel)
                    .addComponent(arriveTimeInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(arrivalTimeLabel)
                    .addComponent(arrivalLocationComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(groupLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(departureLabel)
                            .addComponent(departureLocationComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(groupLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(flightChargeLabel)
                            .addComponent(flightChargeInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addGroup(groupLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(addFlightButton, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(rootPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rootPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean canSubmitTravelTime(String time) { return time.matches("([01]?[0-9]|2[0-3]):[0-5][0-9]");}
    public boolean validDollarAmount(String amount) { return amount.matches("^(?=.*[1-9])[0-9]*[.,]?[0-9]{1,2}$");}

     public void autoID() {
        flightId = database.getNextFlightId();
        flightIdField.setText(flightId);
    }
    
    private void onAddFlight(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String id = flightIdField.getText();
        String flightname = "";

        if (!flightNameInput.getText().isEmpty()) {
            flightname = flightNameInput.getText();
        } else {
            showMessageDialog(null, "Enter Flight Name!");
            return;
        }
         
        String source = arrivalLocationComboBox.getSelectedItem().toString().trim();
        String depart = departureLocationComboBox.getSelectedItem().toString().trim();
         
        DateFormat da = new SimpleDateFormat("yyyy-MM-dd");
        String date = "";

        if (dateChooser.getDate() != null) {
            da.format(dateChooser.getDate());
        } else {
            showMessageDialog(null, "Select a date!");
            return;
        }

        String departtime = "";
        String arrtime = "";

        if (canSubmitTravelTime(departTimeInput.getText()) && canSubmitTravelTime(arriveTimeInput.getText())) {
            departtime = departTimeInput.getText();
            arrtime = arriveTimeInput.getText();
        } else {
            showMessageDialog(null, "Make sure time is formatted 0-23");
            return;
        }

        String flightcharge = "";

        if (validDollarAmount(flightChargeInput.getText())) {
            flightcharge = flightChargeInput.getText();
        } else {
            showMessageDialog(null, "Make sure Cost is formatted 123.21");
            return;
        }
         
        var flight = new Flight(id, flightname, source, depart, date, departtime, arrtime, flightcharge);

        try {
            database.saveFlight(flight);
            
            JOptionPane.showMessageDialog(null,"Flight Created");
        } catch (SQLException ex) {
            // TODO: User feedback if flight fails.
            Logger.getLogger(addflight.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void onCancel(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        this.hide();
    }//GEN-LAST:event_jButton2ActionPerformed

    public String getFlightId() {
        return flightId;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton addFlightButton;
    private JButton cancelButton;
    private JLabel flightIdLabel;
    private JLabel flightNameLabel;
    private JLabel sourceLabel;
    private JLabel departureLabel;
    private JLabel dateLabel;
    private JLabel departTimeLabel;
    private JLabel arrivalTimeLabel;
    private JLabel flightChargeLabel;
    private JPanel rootPanel;
    private JTextField arriveTimeInput;
    private JDateChooser dateChooser;
    private JComboBox<String> departureLocationComboBox;
    private JTextField departTimeInput;
    private JTextField flightChargeInput;
    private JLabel flightIdField;
    private JTextField flightNameInput;
    private JComboBox<String> arrivalLocationComboBox;
    // End of variables declaration//GEN-END:variables
    private String flightId;
}
